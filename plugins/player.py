

async def profile(m, user):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    item1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å')
    item2 = types.KeyboardButton('–ü–æ–∏—Å–∫')
    item3 = types.KeyboardButton('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å')
    item4 = types.KeyboardButton('–ö–æ–ª–æ–¥–∞')
    item5 = types.KeyboardButton('–¢–∞–≤–µ—Ä–Ω–∞')
    markup.row(item1, item5)
    markup.row(item3, item4)
    markup.row(item2)
    pvpWins = await db.Matches.filter(winner=user.id).count()
    pvpPlayed = await db.Matches.filter(Q(player1=user.id) | Q(player2=user.id)).count()
    pvpLose = await db.Matches.filter(Q(player1=user.id) | Q(player2=user.id), ~Q(winner=user.id), status=5).count()
    if m.chat.id != m.from_user.id: return
    if user.league == 1: league = "–ë—Ä–æ–Ω–∑–∞"
    elif user.league == 2: league = "–ñ–µ–ª–µ–∑–æ"
    elif user.league == 3: league = "–°–µ—Ä–µ–±—Ä–æ"
    elif user.league == 4: league = "–ó–æ–ª–æ—Ç–æ"
    elif user.league == 5: league = "–ê–ª–º–∞–∑"
    elif user.league == 6: league = "–ü–ª–∞—Ç–∏–Ω–∞"
    if user:
        text = """üë§–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {}
{}üí∞
{}‚ú¥Ô∏è

–õ–∏–≥–∞: {}

–î—É—ç–ª–µ–π: {}
–ü–æ–±–µ–¥: {}
–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {}

üÜî - {}
        

–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 Ranked-–∏–≥—Ä:

""".format(user.username, user.balance, user.elo, league, pvpPlayed, pvpWins, pvpLose, user.id)
        games = await db.Matches.filter(Q(player1=user.id) | Q(player2=user.id), status=5, tournament='matchmaking').order_by('-id').limit(5)
        for game in games:
            if game.winner == user.id: result = "‚úÖ"
            else: result = "‚ùå"
            if game.player1 == user.id: versus = await db.Users.get_or_none(id=game.player2).only('username')
            if game.player2 == user.id: versus = await db.Users.get_or_none(id=game.player1).only('username')
            if versus:
                text += "\n{} vs {} ({})".format(user.username, versus.username, result)
        await bot.send_message(m.chat.id, text, reply_markup=markup)
    else:
        await start(m)
async def inventory(m, user):
    if m.chat.id != m.from_user.id: return
    if user:
        text = "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
        items = await db.Inventory.exists(idplayer=user.id, status=2)
        if items:
            allItems = await db.Inventory.filter(idplayer=user.id, status=2).order_by('-rare')
            for z in allItems:
                if z.type == '–û—Ö–æ—Ç–Ω–∏–∫': Type = "üó°"
                elif z.type == '–ó–∞—â–∏—Ç–Ω–∏–∫': Type = "üõ°"
                elif z.type == '–ú–∞–≥': Type = 'üîÆ'
                elif z.type == '–û—Å–æ–±—ã–π': Type = "üåü"
                text += "{}{} ({}‚≠êÔ∏è) - /view_{}\n".format(Type, z.name, z.rare, z.id)
        else:
            text += "–ö–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

        text += "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
        items = await db.Inventory.exists(idplayer=user.id, status=1)
        if items:
            allItems = await db.Inventory.filter(idplayer=user.id, status=1).order_by('-rare')
            for z in allItems:
                if z.type == '–û—Ö–æ—Ç–Ω–∏–∫': Type = "üó°"
                elif z.type == '–ó–∞—â–∏—Ç–Ω–∏–∫': Type = "üõ°"
                elif z.type == '–ú–∞–≥': Type = 'üîÆ'
                elif z.type == '–û—Å–æ–±—ã–π': Type = "üåü"
                text += "{}{} ({}‚≠êÔ∏è) - /view_{}\n".format(Type, z.name, z.rare, z.id)
        else:
            text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç."
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton('–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ', callback_data="selectDestroy"))

    if len(text) > 4096:
        l = len(text) + 1
        part_1 = text[0:l//2]
        part_2 = text[l//2:]

        await bot.send_message(user.user_id, f'{part_1}')
        await asyncio.sleep(1)
        await bot.send_message(user.user_id, f'{part_2}', reply_markup=markup)
    else:
        await bot.send_message(user.user_id, text, reply_markup=markup)
#Callback
@dp.callback_query_handler(lambda call: call.data.startswith('inventory'))
async def inventoryCall(call):
    if call.message.chat.id != call.from_user.id: return
    user = await db.Users.get_or_none(user_id=call.from_user.id).first()
    if user:
        text = "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
        items = await db.Inventory.exists(idplayer=user.id, status=2)
        if items:
            allItems = await db.Inventory.filter(idplayer=user.id, status=2).order_by('-rare')
            for z in allItems:
                if z.type == '–û—Ö–æ—Ç–Ω–∏–∫': Type = "üó°"
                elif z.type == '–ó–∞—â–∏—Ç–Ω–∏–∫': Type = "üõ°"
                elif z.type == '–ú–∞–≥': Type = 'üîÆ'
                elif z.type == '–û—Å–æ–±—ã–π': Type = "üåü"
                text += "{}{} ({}‚≠êÔ∏è) - /view_{}\n".format(Type, z.name, z.rare, z.id)
        else:
            text += "–ö–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

        text += "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
        items = await db.Inventory.exists(idplayer=user.id, status=1)
        if items:
            allItems = await db.Inventory.filter(idplayer=user.id, status=1).order_by('-rare')
            for z in allItems:
                if z.type == '–û—Ö–æ—Ç–Ω–∏–∫': Type = "üó°"
                elif z.type == '–ó–∞—â–∏—Ç–Ω–∏–∫': Type = "üõ°"
                elif z.type == '–ú–∞–≥': Type = 'üîÆ'
                elif z.type == '–û—Å–æ–±—ã–π': Type = "üåü"
                text += "{}{} ({}‚≠êÔ∏è) - /view_{}\n".format(Type, z.name, z.rare, z.id)
        else:
            text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç."
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton('–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ', callback_data="selectDestroy"))

    if len(text) > 4096:
        l = len(text) + 1
        part_1 = text[0:l//2]
        part_2 = text[l//2:]

        await bot.send_message(user.user_id, f'{part_1}')
        await asyncio.sleep(1)
        await bot.send_message(user.user_id, f'{part_2}', reply_markup=markup)
    else:
        await bot.send_message(user.user_id, text, reply_markup=markup)

async def view_(m, user):
    if m.chat.id != m.from_user.id: return
    if user:
        result = m.text.replace('/view_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
        card = await db.Inventory.get_or_none(id=result).first()
        if card and card.idplayer == user.id:
            getHero = await db.Heroes.get(id=card.idHero).first()
            await db.send_pic(user, getHero)
            if card.idplayer == user.id:
                markup = InlineKeyboardMarkup()
                markup.row_width = 2
                if card.status == 1:
                    markup.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–æ–¥—É', callback_data="poolEdit_{}".format(card.id)))
                elif card.status == 2:
                    markup.add(InlineKeyboardButton('–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ–ª–æ–¥—ã', callback_data="poolEdit_{}".format(card.id)))
                markup.add(InlineKeyboardButton('–†–∞—Å–ø—ã–ª–∏—Ç—å (+{}üí∞)'.format(getHero.priceDestroy), callback_data="destroy_{}".format(card.id)))
                markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inventory"))
                await bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π", reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data.startswith('destroy_'))
async def destroy_(call):
    idCard = call.data.split("_")[1]
    user = await db.Users.get(user_id=call.from_user.id)
    if user:
        checkBattles = await db.Matches.exists(Q(player1=user.id) | Q(player2=user.id), ~Q(status=5))
        if checkBattles: return await bot.edit_message_text("–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞—Ä—Ç–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å –µ—ë!", call.message.chat.id, call.message.message_id)
        card = await db.Inventory.get_or_none(id=idCard)
        if card and card.idplayer == user.id and card.status != 0:
            getHero = await db.Heroes.get(id=card.idHero).first()
            await db.Users.filter(id=user.id).update(balance=F('balance') + getHero.priceDestroy)
            await db.Inventory.filter(id=card.id).update(status=0)
            await bot.edit_message_text("–ö–∞—Ä—Ç–∞ {} –±—ã–ª–∞ —Ä–∞—Å–ø—ã–ª–µ–Ω–∞.\n+{}üí∞".format(card.name, getHero.priceDestroy), call.message.chat.id, call.message.message_id)
        else:
            await bot.edit_message_text("–¢–∞–∫–æ–π –∫–∞—Ä—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", call.message.chat.id, call.message.message_id)

@dp.callback_query_handler(lambda call: call.data.startswith('selectDestroy'))
async def selectDestroy(call):
    user = await db.Users.get(user_id=call.from_user.id)
    if user:
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton('–†–∞—Å–ø—ã–ª–∏—Ç—å –≤—Å–µ 1‚≠êÔ∏è', callback_data="allDestroy_1"))
        markup.add(InlineKeyboardButton('–†–∞—Å–ø—ã–ª–∏—Ç—å –≤—Å–µ 2‚≠êÔ∏è', callback_data="allDestroy_2"))
        markup.add(InlineKeyboardButton('–†–∞—Å–ø—ã–ª–∏—Ç—å –≤—Å–µ 3‚≠êÔ∏è', callback_data="allDestroy_3"))
        await bot.edit_message_text("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—ã–ª—è–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫—Ä–æ–º–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∫–æ–ª–æ–¥–µ", call.message.chat.id, call.message.message_id, reply_markup=markup)

@dp.callback_query_handler(lambda call: call.data.startswith('allDestroy_'))
async def allDestroy_(call):
    user = await db.Users.get(user_id=call.from_user.id)
    if user:
        rare = call.data.split("_")[1]
        allCards = await db.Inventory.filter(idplayer=user.id, status=1, rare=int(rare))
        await bot.edit_message_text("–ù–∞—á–∞–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø—ã–ª–µ–Ω–∏—è...", call.message.chat.id, call.message.message_id)
        profit = 0
        for card in allCards:
            checkCard = await db.Inventory.get_or_none(id=card.id)
            if checkCard.status == 1:
                hero = await db.Heroes.get(id=checkCard.idHero)
                await db.Inventory.filter(id=checkCard.id).update(status=0)
                await db.Users.filter(id=user.id).update(balance=F('balance') + hero.priceDestroy)
                profit += hero.priceDestroy
        await bot.send_message(user.user_id, "–†–∞—Å–ø—ã–ª–µ–Ω–∏–µ –≤—Å–µ—Ö {}‚≠êÔ∏è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ {}üí∞".format(rare, profit))


async def pool(m, user):
    if m.chat.id != m.from_user.id: return
    if user:
        cardsCount = await db.Inventory.filter(idplayer=user.id, status=2).count()
        text = "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ä—Ç—ã ({}/15):\n\n".format(cardsCount)
        if cardsCount > 0:
            allItems = await db.Inventory.filter(idplayer=user.id, status=2).order_by('rare')
            nowRare = 2
            for z in allItems:
                if nowRare != z.rare:
                    nowRare = z.rare
                    text += "\n"
                    for i in range(0, nowRare):
                        text += "‚≠êÔ∏è"
                    text += "\n"
                if z.type == '–û—Ö–æ—Ç–Ω–∏–∫': Type = "üó°"
                elif z.type == '–ó–∞—â–∏—Ç–Ω–∏–∫': Type = "üõ°"
                elif z.type == '–ú–∞–≥': Type = 'üîÆ'
                elif z.type == '–û—Å–æ–±—ã–π': Type = "üåü"
                text += "{} {} (‚ù§Ô∏è{}/‚öîÔ∏è{}/‚ö°Ô∏è{}) - /view_{}\n".format(Type, z.name, z.hp, z.atk, z.rare, z.id)
        else:
            text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç."
        await bot.send_message(user.user_id, text)

@dp.callback_query_handler(lambda call: call.data.startswith('poolEdit_'))
async def poolEdit_(call):
    user = await db.Users.get(user_id=call.from_user.id)
    checkBattles = await db.Matches.exists(Q(player1=user.id) | Q(player2=user.id), ~Q(status=5))
    if checkBattles: return await bot.edit_message_text("–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞—Ä—Ç–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å –µ—ë!", call.message.chat.id, call.message.message_id)
    idCard = call.data.split("_")[1]
    if user:
        card = await db.Inventory.get_or_none(id=idCard)
        if card and card.idplayer == user.id and card.status != 0:
            if card.status == 1: 
                countInPool = await db.Inventory.filter(idplayer=user.id, status=2).count()
                if countInPool < 15:
                    card.status = 2
                    text = "–ö–∞—Ä—Ç–∞ {} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥—É.".format(card.name)
                else:
                    text = "–ö–æ–ª–æ–¥–∞ –∑–∞–±–∏—Ç–∞, –º–∞–∫—Å–∏–º—É–º 15 –∫–∞—Ä—Ç!"
            else:
                card.status = 1
                text = "–ö–∞—Ä—Ç–∞ {} —É–±—Ä–∞–Ω–∞ –∏–∑ –∫–æ–ª–æ–¥—ã.".format(card.name)
            await card.save()
        else:
            text = "–ö–∞—Ä—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–µ –≤–∞–º"
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
        await inventoryCall(call)



async def dailyStats(call, user):
    text = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ üí∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ! –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–¥–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –≤ 03:00 –ú–°–ö\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:"
    if user.killA >= 10: result = "‚úÖ"
    else: result = f"{user.killA}/10 (3üí∞)"
    text += "\n\n–ü–æ–±–µ–∂–¥–µ–Ω–æ –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤: {}".format(result)
    
    if user.killD >= 10: result = "‚úÖ"
    else: result = f"{user.killD}/10 (3üí∞)"
    text += "\n–ü–æ–±–µ–∂–¥–µ–Ω–æ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤: {}".format(result)
    
    if user.killM >= 10: result = "‚úÖ"
    else: result = f"{user.killM}/10 (3üí∞)"
    text += "\n–ü–æ–±–µ–∂–¥–µ–Ω–æ –º–∞–≥–æ–≤: {}".format(result)
    
    if user.dmgA >= 100: result = "‚úÖ"
    else: result = f"{user.dmgA}/100 (3üí∞)"
    text += "\n–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞ –æ—Ö–æ—Ç–Ω–∏–∫–∞–º–∏: {}".format(result)
    
    if user.dmgD >= 100: result = "‚úÖ"
    else: result = f"{user.dmgD}/100 (3üí∞)"
    text += "\n–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞ –∑–∞—â–∏—Ç–Ω–∏–∫–∞–º–∏: {}".format(result)
    
    if user.dmgM >= 100: result = "‚úÖ"
    else: result = f"{user.dmgM}/100 (3üí∞)"
    text += "\n–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞ –º–∞–≥–∞–º–∏: {}".format(result)

    if user.dmgO >= 100: result = "‚úÖ"
    else: result = f"{user.dmgO}/100 (3üí∞)"
    text += "\n–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞ –æ—Å–æ–±—ã–º–∏: {}".format(result)

    if user.winsD >= 5: result = "‚úÖ"
    else: result = f"{user.winsD}/5 (3üí∞)"
    text += "\n–í—ã–∏–≥—Ä–∞–Ω–æ –ø–∞—Ä—Ç–∏–π: {}".format(result)

    if user.dmgA >= 15: result = "‚úÖ"
    else: result = f"{user.playD}/15 (4üí∞)"
    text += "\n–°—ã–≥—Ä–∞–Ω–æ –ø–∞—Ä—Ç–∏–π: {}".format(result)
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)








async def donate(m):
    if m.chat.id != m.from_user.id: return
    user = await db.Users.get_or_none(user_id=m.from_user.id).first()
    if user:
        text = """–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ (https://toh.su/donate_anikado) . –ó–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å üí∞, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ –≤–∞—à–µ–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—é –≤ —Ä—É–±–ª—è—Ö. 

–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É, –Ω—É –∏, –∑–Ω–∞–µ—Ç–µ... –∂–∏—Ç—å.

–í–∞—à –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π ID - {}
–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ üí∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.""".format(user.id)
        await m.reply(text)
    else:
        await start(m)


