async def tavern(m, user):
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–∞–≤–µ—Ä–Ω—É! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –ª–∏–≥–∏, —Å—ã–≥—Ä–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä—ã –ª–∏–±–æ –∂–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥—É—à–∞–º –∑–∞ –∫—Ä—É–∂–∫–æ–π —Ö–º–µ–ª—å–Ω–æ–≥–æ!"
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton('–¢–û–ü –ª–∏–≥–∏', callback_data="top_league"))
    markup.add(InlineKeyboardButton('–ë–æ–∫—Å—ã', callback_data="boxes"))
    markup.add(InlineKeyboardButton('–ó–∞–¥–∞–Ω–∏—è', callback_data="daily"))
    markup.add(InlineKeyboardButton('–õ–∞–¥–¥–µ—Ä—ã', callback_data="ladders"))
    markup.add(InlineKeyboardButton('AnikadoTV', callback_data="akTv"))
    markup.add(InlineKeyboardButton('Premium-—Å—Ç–∞—Ç—É—Å', callback_data="premium"))
    markup.add(InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data="refs"))
    markup.add(InlineKeyboardButton('–û–±—â–µ–Ω–∏–µ', url="https://t.me/Anikado_chat"))
    await m.answer(text, reply_markup=markup)



async def top_league(call, user):
    top10 = await db.Users.filter(league=user.league).only('elo', 'username').order_by('-elo').limit(10)
    if user.league == 1: league = "–ë—Ä–æ–Ω–∑–∞"
    elif user.league == 2: league = "–ñ–µ–ª–µ–∑–æ"
    elif user.league == 3: league = "–°–µ—Ä–µ–±—Ä–æ"
    elif user.league == 4: league = "–ó–æ–ª–æ—Ç–æ"
    elif user.league == 5: league = "–ê–ª–º–∞–∑"
    elif user.league == 6: league = "–ü–ª–∞—Ç–∏–Ω–∞"

    text = "–¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ –ª–∏–≥–∏ {}:\n".format(league)
    for usr in top10:
        text += "\n{} - {}‚ú¥Ô∏è".format(usr.username, usr.elo)
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)



async def premium(call, user):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    if user.premium == 0:
        text = "Premium-—Å—Ç–∞—Ç—É—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏–≥—Ä –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∞ —Ç–∞–∫ –∂–µ –ø–æ–ª—É—á–∞—Ç—å 16üí∞ –≤ –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞. –°—Ç–æ–∏–º–æ—Å—Ç—å - 255—Ä—É–±."
        markup.add(InlineKeyboardButton('–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium-—Å—Ç–∞—Ç—É—Å', url="https://toh.su/anikado_premium"))
    else:
        text = "–í–∞—à Premium –∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ {}–¥–Ω".format(user.premium)
        if user.premGets == 0:
            markup.add(InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', callback_data="getBonusPrem"))
        markup.add(InlineKeyboardButton('–ü—Ä–æ–¥–ª–∏—Ç—å Premium-—Å—Ç–∞—Ç—É—Å', url="https://toh.su/anikado_premium"))
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)


async def getBonusPrem(call, user):
    if user.premGets == 0 and user.premium > 0:
        await db.Users.filter(id=user.id).update(balance=F('balance') + 16, premGets=1)
        await bot.edit_message_text("–ü–æ–ª—É—á–µ–Ω–æ 16üí∞. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!", call.message.chat.id, call.message.message_id)
    elif user.premGets == 1 and user.premium > 0:
        await bot.edit_message_text("–¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!", call.message.chat.id, call.message.message_id)
    else:
        await bot.edit_message_text("–ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º Premium-—Å—Ç–∞—Ç—É—Å–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –¢–∞–≤–µ—Ä–Ω–µ.", call.message.chat.id, call.message.message_id)



async def ladders(call, user):
    text = "–õ–∞–¥–¥–µ—Ä—ã - —Ö–æ—Ä–æ—à–∏–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å üí∞. –í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –ª–∞–¥–¥–µ—Ä—ã, —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –≤ —Ä–∞–Ω–≥–æ–≤–æ–π –∏–≥—Ä–µ, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—è –ª–∞–¥–¥–µ—Ä-–æ—á–∫–∏ –∏ –∑–∞–±–∏—Ä–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ–±–µ–¥—É –≤ –ª–∞–¥–¥–µ—Ä–µ!"
    if user.ladder:
        checkLadder = await db.Ladders.get_or_none(id=user.ladder).first()
        if checkLadder and checkLadder.active in [1, 2]:
            text += f"\n–í–∞—à —Ç–µ–∫—É—â–∏–π –ª–∞–¥–¥–µ—Ä: {checkLadder.name} (/ladder_{checkLadder.id})\n"
    _ladders = await db.Ladders.filter(~Q(active=3))
    text += "\n–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö/–∏–¥—É—â–∏—Ö –ª–∞–¥–¥–µ—Ä–æ–≤:\n\n(–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ GMT. MSK = GMT+3)\n"
    if _ladders:
        for ladder in _ladders:
            if ladder.active==1: status = "‚è≥"
            elif ladder.active==2: status = "üèÉ‚Äç‚ôÇÔ∏è"
            text += f"\n{ladder.name} ({status}) - /ladder_{ladder.id}"
    else:
        text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–¥—É—â–∏—Ö –ª–∞–¥–¥–µ—Ä–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ—Ç."
    _ladders = await db.Ladders.filter(active=3).order_by('-id').limit(5)
    if _ladders:
        text += "\n\n–ü—Ä–æ—à–µ–¥—à–∏–µ –ª–∞–¥–¥–µ—Ä—ã:"
        for ladder in _ladders:
            winner = await db.Users.get_or_none(id=ladder.winner).first()
            if winner:
                text += f"\n{ladder.name} (‚òëÔ∏è) - {winner.username}"
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    #markup.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–∞–¥–¥–µ—Ä', callback_data="createLadder")) —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –ª–∞–¥–¥–µ—Ä–æ–≤
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


async def ladder_(m, user):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    ladder = await db.Ladders.get_or_none(id=m.text.split("_")[1]).first()
    if ladder:
        if ladder.active==1: status = "‚è≥"
        elif ladder.active==2: status = "üèÉ‚Äç‚ôÇÔ∏è"
        elif ladder.active==3: status = "‚òëÔ∏è"
        text = f"–õ–∞–¥–¥–µ—Ä {ladder.name}\n–°—Ç–∞—Ç—É—Å: {status}"
        startTime = datetime.datetime.fromtimestamp(ladder.startDate)
        stopTime = datetime.datetime.fromtimestamp(ladder.stopDate)
        text += f"\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {startTime}\n–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {stopTime}"
        text += f"\n–ù–∞–≥—Ä–∞–¥–∞: {ladder.reward}üí∞"
        if ladder.active==3:
            ladderWinner = await db.Users.get_or_none(id=ladder.winner)
            text += f"\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {ladderWinner.username}"
        if ladder.active in [1, 2]:
            if ladder.active==2:markup.add(InlineKeyboardButton('–¢–û–ü –ª–∞–¥–¥–µ—Ä–∞', callback_data="ladderTop_{}".format(ladder.id)))
            ladderCount = await db.Users.filter(ladder=ladder.id).only('id').count()
            text += f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {ladderCount}"
            if user.ladder == ladder.id:
                text += f"\n–í–∞—à–∏ –ª–∞–¥–¥–µ—Ä-–æ—á–∫–∏: {user.ladderPts}"
                markup.add(InlineKeyboardButton('–ü–æ–∫–∏–Ω—É—Ç—å –ª–∞–¥–¥–µ—Ä', callback_data="ladderLeave_{}".format(ladder.id)))
            else:
                markup.add(InlineKeyboardButton('–í—Å—Ç—É–ø–∏—Ç—å –≤ –ª–∞–¥–¥–µ—Ä', callback_data="ladderJoin_{}".format(ladder.id)))
        await bot.send_message(m.chat.id, text, reply_markup=markup)
    else:
        await bot.send_message(m.chat.id, "–¢–∞–∫–æ–≥–æ –ª–∞–¥–¥–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

async def ladderLeave_(call, user):
    ladder = await db.Ladders.get_or_none(id=call.data.split("_")[1]).first()
    if ladder and user.ladder == ladder.id:
        await db.Users.filter(id=user.id).update(ladder=0, ladderPts=0)
        await bot.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –ª–∞–¥–¥–µ—Ä. –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã", call.message.chat.id, call.message.message_id)
async def ladderJoin_(call, user):
    ladder = await db.Ladders.get_or_none(id=call.data.split("_")[1]).first()
    if ladder and user.ladder != ladder.id:
        await db.Users.filter(id=user.id).update(ladder=ladder.id, ladderPts=0)
        await bot.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ª–∞–¥–¥–µ—Ä. –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã", call.message.chat.id, call.message.message_id)

async def ladderTop_(call, user):
    ladder = await db.Ladders.get_or_none(id=call.data.split("_")[1]).first()
    if ladder and ladder.active==2:
        text = "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –ª–∞–¥–¥–µ—Ä–∞:\n"
        users = await db.Users.filter(ladder=ladder.id).order_by('-ladderPts').limit(5)
        if users:
            userInTop = 0
            count = 0
            for player in users:
                count += 1
                text += f"\n{count}: {player.username} - {player.ladderPts} pts"
                if player.id == user.id: userInTop = 1
            if user.ladder and user.ladder == ladder.id and userInTop == 0:
                text += f"\n\n{user.username}: {user.ladderPts} pts"        
        else:
            text += "\n–í –ª–∞–¥–¥–µ—Ä–µ –µ—â–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤"
    else:
        text = "–õ–∞–¥–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)





async def refs(call, user):
    allRefs = await db.Users.filter(ref=user.user_id).only('username', 'donateSum')
    refs = ""
    if allRefs:
        refs += "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n"
        for ref in allRefs:
            profit = ref.donateSum * 0.2
            refs += f"\n{ref.username}. –î–æ—Ö–æ–¥ - {profit}"
    text = f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ Anikado –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 20% üí∞ –æ—Ç –∏—Ö –¥–æ–Ω–∞—Ç–æ–≤!\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\nhttps://t.me/Anikado_bot?start={user.user_id}\n{refs}"
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)