class UserStatus(StatesGroup):
    report = State()

usersToReg = {}


@dp.message_handler(commands=['ownstartgame'])
async def ownstartgame(m):
    if m.chat.id == kakushigoto:
        global gameActive
        gameActive = 0
        await bot.send_message(kakushigoto, "–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞...")
        users = await db.Users.filter()
        for i in users:
            usersToReg[i.user_id] = {'id': i.id, 'donateSum': i.donateSum, 'elo': i.elo, 'ref': i.ref, 'balance': i.balance, 'username': i.username}
            await db.Users.filter(id=i.id).delete()
        await bot.send_message(kakushigoto, "–ü–æ–¥—Å—á—ë—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∏–≥—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –ì–æ—Ç–æ–≤–ª—é—Å—å –∫ —Ä–∞—Å—Å—ã–ª–∫–µ...")
        await asyncio.sleep(120)
        await bot.send_message(kakushigoto, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
        gameActive = 1
        for user in usersToReg:
            try:
                await bot.send_message(user, "‚ö†Ô∏è–í Anikado –±—ã–ª –≤—ã–ø—É—â–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–ª–æ–¥–∞. –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ë–ª–∏–∂–∞–π—à–∏–µ 36 —á–∞—Å–æ–≤ –≤–∞–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä, —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–æ–≤, ID, –∏ –ø—Ä–æ—á–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∞ —Ç–∞–∫ –∂–µ - –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –≤ –≤–∏–¥–µ –≥–æ—Ç–æ–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–ª–æ–¥—ã (–∏–ª–∏ –∂–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è), —Å–æ—Å—Ç–æ—è—â–µ–π –∏–∑ –∫–∞—Ä—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
                print("+1")
                await asyncio.sleep(.5)
            except: print("-1")
        print("Finish!")
        await bot.send_message(kakushigoto, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ–æ–≥–∏—Ä—É—é...")
        with open(f"/home/kakushigoto/cards/backup.txt", 'a', newline='') as logFile:
            logFile.write(str(usersToReg))
            logFile.close()


@dp.message_handler(commands=['teststartgame'])
async def ownstartgame(m):
    if m.chat.id == kakushigoto:
        users = await db.Users.filter(id__in=[0, 758])
        for i in users:
            usersToReg[i.user_id] = {'id': i.id, 'donateSum': i.donateSum, 'elo': i.elo, 'ref': i.ref, 'balance': i.balance, 'username': i.username}
            await db.Users.filter(id=i.id).delete()
        print("done")
        await asyncio.sleep(10)
        for user in usersToReg:
            try:
                await bot.send_message(user, "‚ö†Ô∏è–í Anikado –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ë–ª–∏–∂–∞–π—à–∏–µ 48 —á–∞—Å–æ–≤ –≤–∞–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä, —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–æ–≤, –∞ —Ç–∞–∫ –∂–µ - –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –≤ –≤–∏–¥–µ –≥–æ—Ç–æ–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–ª–æ–¥—ã (–∏–ª–∏ –∂–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è), —Å–æ—Å—Ç–æ—è—â–µ–π –∏–∑ –∫–∞—Ä—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
                print("+1")
            except: print("-1")
        with open(f"/home/kakushigoto/cards/backup.txt", 'a', newline='') as logFile:
            logFile.write(str(usersToReg))
            logFile.close()
        print("Finish!")




@dp.message_handler(commands=['admin'])
async def ownpanel(m):
    if m.chat.id == kakushigoto:
        search = await db.System.get(name='search')
        if search.value == 0: search = '–í—ã–∫–ª—é—á–µ–Ω'
        else: search = '–í–∫–ª—é—á–µ–Ω'
        searching = await db.Users.filter(~Q(search=0)).only('id').count()
        playing = await db.Matches.filter(~Q(status=5)).only('id').count()
        lastTime = int(time.time()) - 86400
        matchesdaily = await db.Matches.filter(timeStat__gte=lastTime).count()
        playing *= 2
        text = """
–ü–æ–∏—Å–∫ {}
–ò—â–µ—Ç –∏–≥—Ä—É {}
–ò–≥—Ä–∞—é—Ç {}
–°—ã–≥—Ä–∞–Ω–æ –∑–∞ —Å—É—Ç–∫–∏ {} –∏–≥—Ä
        """.format(search, searching, playing, matchesdaily)

        games = await db.Matches.filter(~Q(status=5))
        if games:
            text += "\n\n\n–¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã:\n"
            for game in games:
                watching = await db.Users.filter(akTV=game.id).count()
                player1 = await db.Users.get(id=game.player1)
                player2 = await db.Users.get(id=game.player2)
                if game.tournament == 'matchmaking': gameType = "Ranked"
                elif game.tournament == 'unranked_standart': gameType = "Unranked –°—Ç–∞–Ω–¥–∞—Ä—Ç"
                elif game.tournament == 'unranked_short': gameType = "Unranked –ö–æ—Ä–æ—Ç–∫–∞—è"
                elif game.tournament == 'unranked_war': gameType = "Unranked –í–æ–π–Ω–∞ –∫–æ–ª–æ–¥"
                text += "\n[{}] {} vs {} /akTV_{} (–ó—Ä–∏—Ç–µ–ª–µ–π: {})".format(gameType, player1.username, player2.username, game.id, watching)
        else:
            text += "\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –∏–≥—Ä..."



        await m.answer(text)

@dp.message_handler(commands=['getuser'])
async def getuser(m):
    if m.from_user.id == kakushigoto:
        if m.reply_to_message:
            user_id = m.reply_to_message.from_user.id
        else:
            user_id = m.text.replace("/getuser ", "", 1)
        user = await db.Users.get_or_none(username=user_id).first()
        if not user:
            user = await db.Users.exists(id=user_id)
            if user:
                user = await db.Users.get(id=user_id).first()
            else:
                user = await db.Users.exists(user_id=user_id)
                if user:
                    user = await db.Users.get(user_id=user_id).first()
                else:
                    await m.answer("–ò–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return
        pvpWins = await db.Matches.filter(winner=user.id).count()
        pvpPlayed = await db.Matches.filter(Q(player1=user.id) | Q(player2=user.id)).count()
        pvpLose = await db.Matches.filter(Q(player1=user.id) | Q(player2=user.id), ~Q(winner=user.id), status=5).count()
        if m.chat.id != m.from_user.id: return
        if user.league == 1: league = "–ë—Ä–æ–Ω–∑–∞"
        elif user.league == 2: league = "–ñ–µ–ª–µ–∑–æ"
        elif user.league == 3: league = "–°–µ—Ä–µ–±—Ä–æ"
        elif user.league == 4: league = "–ó–æ–ª–æ—Ç–æ"
        elif user.league == 5: league = "–ê–ª–º–∞–∑"
        elif user.league == 6: league = "–ü–ª–∞—Ç–∏–Ω–∞"
        if user:
            text = """üë§–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {}
    {}üí∞
    {}‚ú¥Ô∏è

    –õ–∏–≥–∞: {}

    –î—É—ç–ª–µ–π: {}
    –ü–æ–±–µ–¥: {}
    –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {}

    üÜî - {}
            """.format(user.username, user.balance, user.elo, league, pvpPlayed, pvpWins, pvpLose, user.id)
        try:
            await bot.send_chat_action(user.user_id, 'typing')
            text += "\nValid ‚úÖ"
        except:
            text += "\nValid ‚ùå"

        await bot.send_message(m.chat.id, text)



@dp.message_handler(commands=['ownsearch'])
async def ownsearch(m):
    if m.chat.id == kakushigoto:
        search = await db.System.get(name='search')
        if search.value == 0: await db.System.filter(name='search').update(value=1)
        else: await db.System.filter(name='search').update(value=0)
        await m.answer("Done")


@dp.message_handler(commands=['dstats'])
async def dstats(m):
    if m.chat.id == kakushigoto:
        text = ""
        donatesum = 0
        donates = await db.Users.all().order_by('-donateSum')
        for i in donates:
            donatesum += i.donateSum
        text += "–î–æ–Ω–∞—Ç–æ–≤ –Ω–∞ {} RUB".format(donatesum)
        topdons = await db.Users.all().order_by('-donateSum').limit(30)
        text += "\n\n\n–¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤:"
        for i in topdons:
            text += "\n{} - {} RUB".format(i.username, i.donateSum)
        await bot.send_message(kakushigoto, text)


@dp.message_handler(commands=['notification'])
async def ownnotification(m):
    if m.from_user.id == kakushigoto:
        count = 0
        success = 0
        text = m.text.replace("/notification ", "", 1)
        text += "\n\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! @Anikado_news"
        users = await db.Users.all()
        for z in users:
            try:
                gg = await bot.get_chat_member(-1001567421100, int(z.user_id))
                if gg.status != 'left': pass
                else:
                    try:
                        await bot.send_message(z.user_id, text, disable_notification=True)
                        success += 1
                    except:
                        pass
                    count += 1
                    print("+1")
            except:
                print('error')
        await m.reply("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–∏—Å—å–º–æ –ø–æ–ª—É—á–∏–ª–∏ {}/{} –∏–≥—Ä–æ–∫–æ–≤".format(success, count))




@dp.message_handler(commands=['report'])
async def report(m):
    user = await db.Users.exists(user_id=m.from_user.id)
    if user:
        user = await db.Users.get(user_id=m.from_user.id)
        if user and user.ban == 1:
            await profile(m, user)
            return
        if m.from_user.id == m.chat.id:
            await bot.send_message(m.chat.id, "–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await UserStatus.report.set()
    else:
        await start(m)

@dp.message_handler(lambda m: m.chat.id == m.from_user.id, state=UserStatus.report, content_types=types.ContentTypes.ANY)
async def report1(m, state=FSMContext):
    await state.finish()
    if m.chat.id == m.from_user.id:
        try:
            user = await db.Users.get(user_id=m.from_user.id)
            if user and user.ban != 1:
                markup = InlineKeyboardMarkup()
                markup.row_width = 2
                await bot.send_message(devChat, "P–µ–ø–æ—Ä—Ç –æ—Ç {} , {}\n".format(m.from_user.id, user.username), reply_markup=markup)
                await bot.forward_message(devChat, m.from_user.id, m.message_id)
                await bot.send_message(m.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
            elif user.ban == 1:
                await bot.send_message(m.chat.id, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
                return
        except:
            await bot.send_message(devChat, "P–µ–ø–æ—Ä—Ç –æ—Ç {}, {}\n{}".format(m.from_user.first_name, m.from_user.id, m.text))
            await bot.send_message(m.chat.id, "–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à —Ä–µ–ø–æ—Ä—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
@dp.message_handler(commands=['answer'])
async def answer(m):
    if str(m.from_user.id) == kakushigoto or m.chat.id == devChat:
        try:
            text = m.text.replace("/answer ", "", 1)
            __user_id = m.reply_to_message.text.replace("P–µ–ø–æ—Ä—Ç –æ—Ç ", "", 1)
            _user_id = __user_id.split(" ")
            user_id = _user_id[0]
            if m.from_user.id == kakushigoto:
                await bot.send_message(user_id, "‚ö†Ô∏è–ù–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!‚ö†Ô∏è\n{}".format(text))
            else:
                await bot.send_message(user_id, "‚ö†Ô∏è–ù–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!‚ö†Ô∏è\n{}".format(text))
            await bot.edit_message_text(__user_id, m.chat.id, m.reply_to_message.message_id)
            await bot.send_message(m.chat.id, "–ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç")
        except:
            await bot.send_message(m.chat.id, "–û—à–∏–±–∫–∞")

